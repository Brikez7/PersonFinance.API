// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PersonFinance.API.DAL;

#nullable disable

namespace PersonFinance.API.DAL.Migrations
{
    [DbContext(typeof(PersonFinanceContext))]
    [Migration("20230827120619_fix_all_entetites_for_real_task")]
    partial class fix_all_entetites_for_real_task
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.BankingAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTimeOffset>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("banking_accounts", (string)null);
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.Cash", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("cashes", (string)null);
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<string>("OtherPerson")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTimeOffset>("ReceiptDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Returned")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ReturnedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("TypeContract")
                        .HasColumnType("smallint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("contracts", (string)null);
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTimeOffset>("ExpenditureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PurposeSpending")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ReceiptDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeActivity")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("incomes", (string)null);
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.InvestAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("invests_accounts", (string)null);
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.BankingAccount", b =>
                {
                    b.OwnsOne("PersonFinance.API.Domain.Entities.structs.Money", "Money", b1 =>
                        {
                            b1.Property<Guid>("BankingAccountId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<short>("Corrency")
                                .HasColumnType("smallint");

                            b1.HasKey("BankingAccountId");

                            b1.ToTable("banking_accounts");

                            b1.WithOwner()
                                .HasForeignKey("BankingAccountId");
                        });

                    b.Navigation("Money")
                        .IsRequired();
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.Cash", b =>
                {
                    b.OwnsOne("PersonFinance.API.Domain.Entities.structs.Money", "Money", b1 =>
                        {
                            b1.Property<Guid>("CashId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<short>("Corrency")
                                .HasColumnType("smallint");

                            b1.HasKey("CashId");

                            b1.ToTable("cashes");

                            b1.WithOwner()
                                .HasForeignKey("CashId");
                        });

                    b.Navigation("Money")
                        .IsRequired();
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.Contract", b =>
                {
                    b.OwnsOne("PersonFinance.API.Domain.Entities.structs.Money", "MoneyCredit", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<short>("Corrency")
                                .HasColumnType("smallint");

                            b1.HasKey("ContractId");

                            b1.ToTable("contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.OwnsOne("PersonFinance.API.Domain.Entities.structs.Money", "ReturnedMoney", b1 =>
                        {
                            b1.Property<Guid>("ContractId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<short>("Corrency")
                                .HasColumnType("smallint");

                            b1.HasKey("ContractId");

                            b1.ToTable("contracts");

                            b1.WithOwner()
                                .HasForeignKey("ContractId");
                        });

                    b.Navigation("MoneyCredit")
                        .IsRequired();

                    b.Navigation("ReturnedMoney");
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.Expense", b =>
                {
                    b.OwnsOne("PersonFinance.API.Domain.Entities.structs.Money", "MoneySpent", b1 =>
                        {
                            b1.Property<Guid>("ExpenseId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<short>("Corrency")
                                .HasColumnType("smallint");

                            b1.HasKey("ExpenseId");

                            b1.ToTable("expenses");

                            b1.WithOwner()
                                .HasForeignKey("ExpenseId");
                        });

                    b.Navigation("MoneySpent")
                        .IsRequired();
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.Income", b =>
                {
                    b.OwnsOne("PersonFinance.API.Domain.Entities.structs.Money", "MoneyReceived", b1 =>
                        {
                            b1.Property<Guid>("IncomeId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<short>("Corrency")
                                .HasColumnType("smallint");

                            b1.HasKey("IncomeId");

                            b1.ToTable("incomes");

                            b1.WithOwner()
                                .HasForeignKey("IncomeId");
                        });

                    b.Navigation("MoneyReceived")
                        .IsRequired();
                });

            modelBuilder.Entity("PersonFinance.API.Domain.Entities.InvestAccount", b =>
                {
                    b.OwnsOne("PersonFinance.API.Domain.Entities.structs.Money", "Money", b1 =>
                        {
                            b1.Property<Guid>("InvestAccountId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<short>("Corrency")
                                .HasColumnType("smallint");

                            b1.HasKey("InvestAccountId");

                            b1.ToTable("invests_accounts");

                            b1.WithOwner()
                                .HasForeignKey("InvestAccountId");
                        });

                    b.Navigation("Money")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
